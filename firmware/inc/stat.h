#ifndef STAT_H
#define STAT_H

#include <stdint.h>
#include "fw_features.h"

typedef enum
{
    /* Lower Word Bits */
    STAT_VCU_LOG_UPLOAD_RUNNING = 0U,
    STAT_VCU_LOG_DELETION_RUNNING,
    STAT_VCU_FW_DL_RUNNING,
    STAT_VCU_KEY_EVENT,
    STAT_VCU_MOTOR_CON_KEY_SW_ON,
    STAT_VCU_MOTOR_CON_DIR_FWD,
    STAT_VCU_MOTOR_CON_DIR_REV,
    STAT_VCU_VEHICLE_KEY_OFF,
    STAT_VCU_FRONT_BRAKE_PRESS,
    STAT_VCU_REAR_BRAKE_PRESS,
    STAT_VCU_MOTOR_CON_FAULT,
    STAT_VCU_IMU_FAULT,
    STAT_VCU_IMU_DMP_FAULT,
    STAT_VCU_LAC_BUS_LOW_VOLTAGE_WARNING,
    STAT_VCU_MOTOR_OVER_TEMPERATURE,
    STAT_VCU_RTC_INIT_FAILURE,
    STAT_VCU_RTC_READ_FAILURE,
    STAT_VCU_ABS_REAR_WHEEL_SPEED_SENSOR_FAILURE,
    STAT_VCU_ABS_FRONT_WHEEL_SPEED_SENSOR_FAILURE,
    STAT_VCU_ABS_LAMP_WARNING_WSS_FAILURE,
    STAT_VCU_IMU_OFS_CALIBRATION,
    STAT_VCU_NVM_TIMEOUT,
    STAT_VCU_FW_UPD_READY,
    STAT_VCU_SM_INVALID_STATE_ENTRY,
    STAT_VCU_BMS_CAN_MSG_TIMEOUT,
    STAT_VCU_BMS_CAN_LINK_FAIL,
    STAT_VCU_CHARGING_IN_PROGRESS,
    STAT_VCU_CHARGING_COMPLETE,
	STAT_VCU_CAN_MSG_EXEC_ERR,
	STAT_VCU_SIDE_STAND_DEPLOYED,
	STAT_VCU_MC_MODE_GLIDE,
	STAT_VCU_MC_MODE_COMBAT,
    
    /* Upper Word Bits */
	STAT_VCU_MC_MODE_BALLISTIC,
	STAT_VCU_MOTOR_HS_OVER_TEMPERATURE,
	STAT_VCU_MC_TMAP_LOAD_FAIL,
	STAT_VCU_MC_TMAP_UPDATED,
	STAT_VCU_MC_TMAP_COMITTED,
	STAT_VCU_MC_TMAP_FACT_RESET,
	STAT_VCU_THROTTLE_ERROR,
	STAT_VCU_SWIF_ERROR,
	STAT_VCU_MC_REGEN,
	STAT_VCU_BMS_SW_EXCEPTION,
	STAT_VCU_ABS_MODE,
	STAT_VCU_ABS_FCN_ACTIVE,
	STAT_VCU_ABS_MODE_ERR,
	STAT_VCU_CHARGING_ERROR,
	STAT_VCU_PA_MODE_FWD,
	STAT_VCU_PA_MODE_REV,
	STAT_VCU_PA_MODE_ENTRY,
	STAT_VCU_SW_EXCEPTION,
	STAT_VCU_PA_MODE_ERROR,
	STAT_VCU_MC_PA_ERROR,
	STAT_VCU_MC_NOT_RESPONDING,
	STAT_VCU_PHY_LINK_RST_FAIL,
	STAT_VCU_PHY_LINK_TIMEOUT,
	STAT_VCU_SIM_NOT_DETECTED,
	STAT_VCU_MC_FACT_RESET,
	STAT_VCU_MC_MODE_HOVER,
	STAT_VCU_ODO_NVM_ERROR,
	STAT_VCU_SWIF_INTERNAL_ERROR,
	STAT_VCU_UNUSED61,
	STAT_VCU_UNUSED62,
	STAT_VCU_UNUSED63,
    
    MAX_STATUS_FLAGS
    
}vcu_status_e;

uint64_t get_status(void);
void set_status_bit(vcu_status_e b);
void clear_status_bit(vcu_status_e b);
void clear_all_flags(void);
void clear_select_bits(void);

#endif /* STAT_H */

